# -*- coding: utf-8 -*-
"""Cough Analysis with MobileNet

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/cough-analysis-with-mobilenet-e83128a8-ee8c-401b-925c-9d51331d9a6d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240703/auto/storage/goog4_request%26X-Goog-Date%3D20240703T034748Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4ed8ea60dd22c5dcd253c08eeb28b61b8b570e895b5d6d58e69961b222cc3c35481af93e631fe4f66a51a3f4c8e7950c564a5b6a3951403023c0fab083f96f7f911450cf1068ba16bac33cc32c1b9ab7ae715e4f29d987f17bf2e9c5ebd1e7ae772d48e8cd0ee5c3731cf58b5222c98ee4a92513e84055d95c1e3d1a46579a27d7c8b1b0ef1f8c614e7b3de283912ddfad704a11547c8b50aefa0689be63101e9023617865f063762856d4958aa100efafa901b577c16e3c78f884e3e2098e32702afbc2e370cd7d320612494d652a8e2ec39a2a14e5e1b545b9ad3cfeb7ff0285504579cbb1463993c631add7782950f8a301fa192f0225f9b9f906472b15f9
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES


import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'cough-detection:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F661328%2F1166809%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240703%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240703T034748Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2f2cef9b40e63cfe40495c33fd8b4d3f9561636980fac18b059c67265926e84f7483f8018b0d5e3bba6209f99fc344a81f59ac1534a75c039c03c70d3524821de6b469803831e5aa6d94363d9e52eabf6111807bb3e887ee5ef20b913b08217dba9fbc8a55a1742c6f3148befa2e80fecddc91b8c8518b6951c120c3f33c4a67d9b587a08680590f6c21a99455cb269f71d20b2ab09bfff5f57736b9fd3410e89e49db0a3066390043dad1eae4449368ad4b0ab3eb1167e0bdc07efec247b42f4e777882d385e7fd8dbf3dd4203108b87777b42abb5bc8aec1fc4b613fad0d18f9db5d3ed2cc8ed16c0d027bc5b70142875da952f0743f284e38792ca67d9e6f,coughclassifier-trial:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1087067%2F2314323%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240703%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240703T034748Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dba4ffd4fc0b4a278a49346f50bf3560011b0eec2945e32d93a4454fcc608f31d12031f0c080edbfe03bab161db39c89caec24940dc0285f3c119c77c14ce4e649b5b4a7f19ce77e1e605cf422dab9454584b1828959b03d284348c779f61d518dc200861e92067e09569386e0ce64e88445d6ed22f49df8413c933e454adbbdbe9c301589c0e739b95ebe8204e6e801482c07e7ec42f291f1aa046ec6c657b2bc30b89e7b20ca1a982d1be7284d7dcd92b7027252765f1ef6a1d7a069c1f997eec5cfe84d2400af251cb82015f272c8ed5b01f1524f36b2ee78fa0a92cb41234150d00798fa12af4e0eda1c28e23514f83c236bd9fe1a85199c0a6728ca8560f,covid-cough-wavs:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1420924%2F2353327%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240703%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240703T034748Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D97612b7752d0f1f5e1998b8a1ebc9251cf1694a6252573da65a5b24a3a59a4dc5583aa889464a592ef5f171a5a866675a5b0aae073b5ed1424de200939cb7f016e600babab4896ecbb6d820ebea490b14bd9977c4be585c49c3a1c61acd84637e907985d6a05a93137c02ef01ba618f67cbbc5a5f86f0876b64f9a52de53d6fdee4e5a46f24f75cf20a3b136d796d18ec0465ad121932b2b1e5a0f83d9edbad01bd4016faa14f1f1aea94810d01e619e62699d25248ae320f9c56bca9108edfdf55aad3a5b62ad3d76a2cd3bb66e4f7639e79b9fe7599c13f951067635d4de8ba705ebeaca46e7349138ff9c2e53ad4d87b5825d569daecdccce3f7fb0622a0b'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

"""# Loading Libraries"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout
import time

import matplotlib.pyplot as plt

"""# Data Augmentation"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
data_generator = ImageDataGenerator(rescale=1./255.,validation_split=0.2,
                                   featurewise_center=True,
        samplewise_center=True,
        featurewise_std_normalization=True,
        samplewise_std_normalization=True,
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.15,
        zoom_range=0.15,
        fill_mode="nearest",
        horizontal_flip=True,
        vertical_flip=True
                        )
train_generator = data_generator.flow_from_directory(directory= '../input/cough-detection/melspectrograms/training',
                                                     target_size=(224, 224),
                                                     class_mode='binary',
                                                     subset='training',
                                                     shuffle=True,
                                                     seed=2,
                                                     batch_size=32,
                                                     color_mode='rgb'
                                                     )

valid_generator = data_generator.flow_from_directory(directory= '../input/cough-detection/melspectrograms/testing',
                                                     target_size=(224, 224),
                                                     class_mode='binary',
                                                     subset='validation',
                                                     shuffle=True,
                                                     batch_size=32,
                                                     color_mode='rgb'
                                                    )

classes = ['cough', 'no_cough']

"""# Data Visualization"""

plt.figure(figsize=(10,10))
plt.subplot(2,2,1)
plt.bar(classes, train_generator.labels.sum(axis = 0)/train_generator.n * 100)
plt.title('On training set')
plt.subplot(2,2,2)
plt.bar(classes, valid_generator.labels.sum(axis = 0)/valid_generator.n * 100, color='rgb')
plt.title('On validation set')

sample_training_images, _ = next(train_generator)

def plotImages(images_arr):
    fig, axes = plt.subplots(1, 5, figsize=(20,20))
    labels = sample_training_images
    axes = axes.flatten()
    for img, ax in zip(images_arr, axes):
        ax.imshow(img)
        ax.axis('off')
    plt.tight_layout()
    plt.show()

plotImages(sample_training_images[:5])

model = tf.keras.models.Sequential()
model.add(InceptionNetV3(include_top=False, pooling='avg', weights='imagenet', input_shape=(224, 224, 3), classes=2))
model.add(Dense(2, activation='softmax'))
model.layers[0].trainable = False
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

callbacks = tf.keras.callbacks.EarlyStopping(monitor = 'val_accuracy', patience = 2)
history = model.fit_generator(train_generator,
                              steps_per_epoch = len(train_generator),
                              epochs=10,
                              validation_steps = len(valid_generator),
                              validation_data=valid_generator,
                              callbacks = [callbacks]
                              )

def visualize_training(history, lw = 3):
    plt.figure(figsize=(10,6))
    plt.plot(history.history['accuracy'], label = 'training', marker = '*', linewidth = lw)
    plt.plot(history.history['val_accuracy'], label = 'validation', marker = 'o', linewidth = lw)
    plt.title('Training Accuracy vs Validation Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend(fontsize = 'x-large')
    plt.show()

    plt.figure(figsize=(10,6))
    plt.plot(history.history['loss'], label = 'training', marker = '*', linewidth = lw)
    plt.plot(history.history['val_loss'], label = 'validation', marker = 'o', linewidth = lw)
    plt.title('Training Loss vs Validation Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend(fontsize = 'x-large')
    plt.show()
visualize_training(history)

"""# Predictions"""

preds = model.predict_generator(valid_generator,steps=15)

label = valid_generator.classes

pred= model.predict(valid_generator)
predicted_class_indices=np.argmax(pred,axis=1)
labels = (valid_generator.class_indices)
labels2 = dict((v,k) for k,v in labels.items())
predictions = [labels2[k] for k in predicted_class_indices]
print(predicted_class_indices)
print (labels)
print (predictions)

image_path = '../input/cough-detection/melspectrograms/testing/cough/1-63679-A-24.png'
image = tf.keras.preprocessing.image.load_img(image_path)
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])  # Convert single image to a batch.
predictions = model.predict(input_arr)

# #Loading CSV file
# train_csv = pd.read_csv("../input/coughclassifier-trial/cough_trial_extended.csv")
# dataset = "../input/coughclassifier-trial/cough_trial_extended.csv"

# cmap = plt.get_cmap('inferno')
# tot_rows = train_csv.shape[0]
# for i in range(tot_rows):
#     source = train_csv['file_properties'][i]
#     filename = '../input/coughclassifier-trial/trial_covid/'+source
#     y,sr = librosa.load(filename, mono=True, duration=5)
#     plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');
#     plt.axis('off');
#     plt.savefig(f'./{source[:-3].replace(".", "")}.png')
#     plt.clf()

import librosa
import librosa.display
from pydub import AudioSegment
import matplotlib.pyplot as plt
from scipy.io import wavfile
from tempfile import mktemp

def plot_mp3_matplot(filename):
    """
    plot_mp3_matplot -- using matplotlib to simply plot time vs amplitude waveplot

    Arguments:
    filename -- filepath to the file that you want to see the waveplot for

    Returns -- None
    """

    # sr is for 'sampling rate'
    # Feel free to adjust it
    x, sr = librosa.load(filename, sr=44100)
    plt.figure(figsize=(14, 5))
    librosa.display.waveplot(x, sr=sr)

def convert_audio_to_spectogram(filename):
    """
    convert_audio_to_spectogram -- using librosa to simply plot a spectogram

    Arguments:
    filename -- filepath to the file that you want to see the waveplot for

    Returns -- None
    """

    # sr == sampling rate
    x, sr = librosa.load(filename, sr=44100)

    # stft is short time fourier transform
    X = librosa.stft(x)

    # convert the slices to amplitude
    Xdb = librosa.amplitude_to_db(abs(X))

    # ... and plot, magic!
    plt.figure(figsize=(14, 5))
    librosa.display.specshow(Xdb, sr = sr, x_axis = 'time', y_axis = 'hz')
    plt.colorbar()

# same as above, just changed the y_axis from hz to log in the display func
def convert_audio_to_spectogram_log(filename):
    x, sr = librosa.load(filename, sr=44100)
    X = librosa.stft(x)
    Xdb = librosa.amplitude_to_db(abs(X))
    plt.figure(figsize=(14, 5))
    librosa.display.specshow(Xdb, sr = sr, x_axis = 'time', y_axis = 'log')
    plt.colorbar()

convert_audio_to_spectogram_log('../input/covid-cough-wavs/cleaned_data/Positive/1041_Positive_male_39.wav')



# Commented out IPython magic to ensure Python compatibility.
# Convert new audio recording to MelSpectogram
# %matplotlib inline
import librosa
cmap = plt.get_cmap('inferno')
source = '../input/covid-cough-wavs/cleaned_data/Positive/1066_Positive_male_23.wav'
filname = '../input/covid-cough-wavs/cleaned_data/Positive'
filename = source
y,sr = librosa.load(filename, mono=True)
plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');
#plt.axis('off');
#plt.savefig(f'source1.png')
plt.savefig('foo1.png')
plt.clf()



predictions

image_path = 'foo1.png'
image = tf.keras.preprocessing.image.load_img(image_path)
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])  # Convert single image to a batch.
predictions1 = model.predict(input_arr)

predictions1

"""# Predicting Non Cough samples"""

image_path = '../input/cough-detection/melspectrograms/training/no_cough/1-100038-A-14.png'
image = tf.keras.preprocessing.image.load_img(image_path)
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])  # Convert single image to a batch.
predictions_nocough = model.predict(input_arr)

predictions_nocough

from sklearn.metrics import confusion_matrix, classification_report, roc_curve

rc = roc_curve(predicted_class_indices,label)
cf_matrix = confusion_matrix(predicted_class_indices,label)
cf_report = classification_report(predicted_class_indices,label)
print('Confusion matrix report of the model : \n{}'.format(cf_matrix))

exp_series = pd.Series(label)
pred_series = pd.Series(predicted_class_indices)
pd.crosstab(exp_series, pred_series, rownames=['Actual'], colnames=['Predicted'],margins=True)

print('Classification report of the model : \n{}'.format(cf_report))

"""# Saving Model"""

t = time.time()
save_path = '.'
model_json = model.to_json()
with open(os.path.join(save_path,"network.json"), "w") as json_file:
    json_file.write(model_json)

# save neural network structure to YAML (no weights)
model_yaml = model.to_yaml()
with open(os.path.join(save_path,"network.yaml"), "w") as yaml_file:
    yaml_file.write(model_yaml)

# save entire network to HDF5 (save everything, suggested)
model.save(os.path.join(save_path,"network.h5"))

!ls

"""# Loading the Saved Model and Predictions"""

from tensorflow.keras.models import load_model
model2 = load_model(os.path.join(save_path,"network.h5"))
pred = model2.predict(input_arr)
pred



